---
title: "Introdutction to STanalysis3D"
author: "Ludvig Larsson"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Introdutction to STanalysis3D}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

# Introduction
The STanalysis3D package comes with a toolbok of functions specifically designed to work with Spatial Transcriptomics data. The main advantage is to simplify data processing steps when working with multiple replicates from the same tissue, making it possible to extend the analysis to 3D. To take full advantage of the package, it is recommended to work with RStudio. 

## Part I: Prepare data

    1. Install package
    2. Prepare data 
    3. Create spaceST object and run uality checks
    
### 1. Install package
First of all, you need to download the package from github. For this, you will need to install the devtools [package](https://github.com/hadley/devtools). Once devtools has been installed, you can install STanalysis3D by typing the following in the RStudio console:

```{r, eval = FALSE}
library(devtools)
install_github("ludvigla/ST_analysis3D")
```

### 2. Prepare data
The first is to load som gene expression ST data. The format of these expression datasets is important, because the feature coordinates will be collected from the headers of these datasets. The format required is features as columns and genes as rows. The headers need to have the following format: 

    n_x_y
    
, where n is the number of the replicate, and x, y are feature coordinates. 

Once you have prepared the expression matrices with the correct headers, they should be saved into a list of matrices. The package includes a prepared dataset called bcST that can be loaded into your R session. The bcST dataset 

```{r, message=FALSE, warning=FALSE, eval = FALSE}
library(STanalysis3D)
#data(bcST)
```
```{r, echo=FALSE, results='asis'}
# Check the format of te first expression dataset
#knitr::kable(head(bcST[[1]][, 1:8]))
```

Above is a chunk of replicate 1 in the bcST dataset. Note that the genes are given by their HGNC symbols. It is recommended to convert gene ids to HGNC. If you have ensembl ids, you can use the ensembl2hgnc() function. Since some HGNC symbols are represented by several ensembl ids, this function will aggregate any rows of the input expression matrix with the same resulting HGNC symbol.  

```{r, eval = FALSE}
# Replace ensembl gene ids with HGNC symbols
exp.list <- ensembl2hgnc(exp.list)

```

### 3. Create spaceST object and run quality checks
Now you can merge the expression datasets into a spaceST object. The merged expressio data will automatically be filtered from features and genes with low complexity as well as ribosoal protein genes and MALAT1 (only works for HGNC symbols). You can adjust the filtering settings when you initialize a spaceST object. You can also do batch correction of the exoression dataset directly when initializing the spaceST object. Calling the spaceST object will print what filtering settings that were used and some statistics about the features. If the dataset is batch corrected, the corrected dataset will always be summarized.

```{r, eval = FALSE}
# Initialize spaceST object with batch correction
spaceST.object <- get.spaceST(bcST, correction = T)
spaceST.object
```

Alternatively, you might want to plot the summary statistics as histograms instead. You could also make a PCA plot of the replicates to check for technical variations between replicates. The pca.spaceST() function will automatically compare the filtered expression data with the batch corrected data if this is present.

```{r, fig.show='hold', eval = FALSE}
# QC plot
plot.QC.spaceST(spaceST.object)

# PCA plot
pca.spaceST(spaceST.object)
```
```{r, fig.show='hold', fig.width=6, eval = FALSE}
# Or if you want to split up relicates in separate plots
plot.QC.spaceST(spaceST.object, separate = T)
```

## Part II: factor analysis

    1. Compute factors using cellTree package
    2. Calculate feature clusters based on topics
    3. Plot heatmap of topic results
    4. Compute cluster matrix (pooling of data)
    5. QC plot of pooled data

### 1. Compute factors using cellTree package

STanalysis3D includes a helper function which lets you run the lda.compute() function from the cellTree package directly on a spaceST object. Alternatively, you could extract the batch corrected data and run lda.compute() or any other factor analysis method on the dataset.

The default settings tests the 5000 most highly expressed genes and tests between 2 and 15 topics to find the optimal number. The topic matrix which best explains the data will be returned, or set return.lda = TRUE to return the whole "topics" object. You could test more than 15 topics, but typically the likelihood only increase slightly for a large number of topics which makes additional topics redundant. 

The factor analysis should take some time to compute. Grab a coffee!
```{r, eval = FALSE}
ST.topics <- topic.compute(spaceST.object)
```
```{r, eval=FALSE, echo=FALSE, results='asis'}
# Check the format of te first expression dataset
knitr::kable(head(ST.topics[, 1:8]))
```

### 2. Calculate feature clusters based on topics

The topic matrix is constructed with features as rows and topics as columns. Each feature is assigned with a proportion for each topic specifying how much the feature is "driven" by that topic. We can cluster the features based on these topic proportion using the topic_clusters() function. This function automatically decides the number of clusters in you data, but you should specify the minimum number of features allowed in a cluster (default 30 features).


You can enable figure captions by `fig_caption: yes` in YAML:

    output:
      rmarkdown::html_vignette:
        fig_caption: yes

Then you can use the chunk option `fig.cap = "Your figure caption."` in **knitr**.

## More Examples

You can write math expressions, e.g. $Y = X\beta + \epsilon$, footnotes^[A footnote here.], and tables, e.g. using `knitr::kable()`.

```{r, echo=FALSE, results='asis'}
knitr::kable(head(mtcars, 10))
```

Also a quote using `>`:

> "He who gives up [code] safety for [code] speed deserves neither."
([via](https://twitter.com/hadleywickham/status/504368538874703872))
